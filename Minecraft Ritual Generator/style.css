* {
    position: relative;
}

body, html {
    width: calc(100%-var(-mm)*2);
    height: calc(100%-var(-mm)*2);
    background: var(--font);
    margin: 0;
    
    --font: #303030;
    --mm: 1.2em;
}

.grid {
    top: 0;
    display: grid;
    
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    width: fit-content;
    height: fit-content;
    
    background: #3e3e3e;
    margin: calc(var(--mm)*2);
    
    grid-gap: 5px;
    visibility: hidden;
    padding: 5px;
    transition: .2s .1s ease;
}

item {
    width: 50px;
    height: 50px;
    background: #4e4e4e;
    border-radius: 3px;
    cursor: pointer;
    display: flex;
    -ms-align-items: center;
    align-items: center;
    justify-content: center;
    font-family: cursive;
    font-size: var(--mm);
    user-select: none;
    color: rgba(255, 255, 255, 0.2);
}

item::after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    background: transparent;
    width: 100%;
    height: 100%;
}

item:hover::after {
    background: rgba(255, 255, 255, 0.2);
}

.flex {
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flex;
    display: -o-flex;
    display: flex;
    width: fit-content;
}

.wrap {
    flex-wrap: wrap;
    gap: 15px;
}

section {
    width: calc(100% - var(--mm)*4);
    height: fit-content;
    background: #4e4e4e;
    padding: var(--mm);
    margin: var(--mm);
}

.header {
    width: auto;
    height: fit-content;
}

.button {
    cursor: pointer;
    justify-content: center;
    align-items: center;
    text-align: center;
    border-radius: 13px;
    padding: 0 0;
    
    width: max-content;
    height: max-content;
    max-width: 200px;
    max-height: 50px;
    margin: auto;
    user-select: none;
}

.button > h1 {
    padding: 8px 0;
}

.white {
    color: white;
}

.black {
    color: black;
}

.text {
    transition: .5s ease;
}

.multi_text {
    font-family: cursive;
    text-align: center;
}

.main_text {
    font-family: sans-serif;
    font-size: 1.2em;
    width: fit-content;
}

.small_text {
    font-size: 1em;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
}

.input {
    bottom: 4px;
    height: 1em;
    margin-top: 1.5em;
    margin: 1em;
    width: 30px;
    border-radius: 20px;
    font-size: 1.2em;
    font-family: cursive;
    
    justify-content: center;
    align-items: center;
    text-align: center;
}

#giveCommandButton {
    padding: 0 var(--mm);
    background: white;
    position: relative;
    margin: auto;
    transition: .5s ease;
    height: fit-content;
    min-height: fit-content;
    margin-bottom: var(--mm);
}

#confirmSizes {
    width: 200px;
    background: white;
    position: relative;
    margin: auto;
    transition: .5s ease;
}

#confirmSizes:hover * {
    color: #a70021;
}

.blockPallete {
    margin: calc(var(--mm)*2);
    width: fit-content;
    height: fit-content;
    display: flex;
}

.blockPalleteItem {
    padding: calc(var(--mm)/2) var(--mm);
    border-radius: 9px;
    width: fit-content;
    height: fit-content;
    user-select: none;
    cursor: pointer;
    transition: .1s ease;
    margin: auto;
}

.blockPalleteItem:hover {
    outline: 3px double black;
    box-shadow: 4px 4px white;
}

.blockPalleteItem[status=yes] {
    outline: 3px double black;
    box-shadow: 4px 4px white;
}

#CenterBlock {
    background: cyan;
}

#AddBlockButton {
    background: #54874d;
}

#Redstone {
    background: #8a0520;
    padding: calc(var(--mm));
}

#commandInput {
    margin: auto;
    width: 80vw;
    height: fit-content;
    font-size: 1.2em;
    color:#00c85d;
    text-align: start;
    background: #2b2b2b;
    user-select: auto;
    resize: both;
    border-radius: 15px;
    overflow-x: none;
    overflow-y: auto;
    min-width: 100px;
    min-height: 100px;
    max-width: 85vw;
    max-height: 85vh;
    padding: var(--mm);
}

#commandInputParent {
    justify-content: center;
    align-items: center;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flex;
    display: -o-flex;
    display: flex;
    margin: auto;
    width: max-content;
    height: fit-content;
    padding: 0;
    font-family: monospace;
}

.plusimg {
    margin: 0 calc(var(--mm)) 0 0;
    width: 25px;
    height: 25px;
}

#AddBlock {
    margin: 0;
    padding: 0;
}

.smallInput {
    min-width: 50px;
    width: fit-content;
    max-width: 150px;
    padding: 0;
    margin: 0;
    margin-top: calc(var(--mm)/2);
}



#TakePlayerCoordsButton {
    width: 50px;
    height: 50px;
    background: white;
    margin: 0 var(--mm);
    border-radius: 16px;
    transition: .2s ease;
    display: none;
    opacity: 0;
}

#TakePlayerCoordsButton:hover {
    background: #97dada;
}

#TakePlayerCoordsButton[state=true] {
    transform: rotate(45deg);
    background: #97dada;
}

#TakePlayerCoordsButton img {
    width: 80%;
    height: 80%;
    left: calc(50px*0.075);
    top: calc(50px*0.075);
}

.addLayerButton {
    background: #476367;
    padding: calc(var(--mm)/2);
    min-width: 200px;
    visibility: hidden;
    opacity: 0;
    transition: .2s ease;
}

.addLayerButton:hover {
    background: #55a2ad;
}

.gridWrap {
    max-width: 100vw;
    height: auto;
    overflow: auto;
    width: clamp(50%, 100%, 90vw);
}

.gridWrap::-webkit-scrollbar {
    background: #2c2c2c;
    width: 3px;
    height: 12px;
}

.gridWrap::-webkit-scrollbar-thumb {
    background: #71a9c8;
    width: 4px;
    height: 15px;
    bottom: 0;
    outline: 1px dashed black;
}

#originalGrid {
    outline: 3px solid cyan;
}

#CustomCommand {
    width: 80vw;
    min-height: 2ch;
    max-height: 8ch;
    height: fit-content;
    resize: vertical;
    background: #2b2b2b;
    text-align: start;
    color: #00c85d;
    font-family: monospace;
    border-radius: 15px;
    padding: calc(var(--mm));
    font-size: 1.2em;
}

#CustomCommandParent {
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flex;
    display: -o-flex;
    display: flex;
    justify-content: center;
    -ms-align-items: center;
    align-items: center;
    margin: auto;
}


.coordsPlayerBlock {
    visibility: hidden;
    opacity: 0;
    transition: .2s ease;
    flex-wrap: wrap;
}

.que {
    background: url(img/question.png);
    background-size: contain;
    background-repeat: no-repeat;
    width: 25px;
    height: 25px;
    position: relative;
    right: 0;
    top: 0;
    margin: auto 0;
    cursor: pointer;
    z-index: 1;
}

/*
.que h1 {
    width: 200px;
    background: #2b2b2b;
    border-radius: 15px;
    top: 25px;
    padding: calc(var(--mm)/2);
    font-size: 1em;
    font-family: sans-serif;
    outline: 2px solid white;
    opacity: 0;
    transition: .3s ease;
    transform: scale(0);
    transform-origin: top left;
    font-weight: 100;
    max-width: max-content;
    min-width: min-content;
    right: 100%;
}

.que:hover h1 {
    opacity: 1;
    transform: scale(1);
}
*/

.que::after {
    position: absolute;
    content: '';
    padding: calc(var(--mm)/2);
    opacity: 0;
    z-index: -5;
    transition: .3s ease;
    width: 200px;
    transform: scale(0);
    max-width: calc(180ch+var(--mm));
    min-width: 5ch;
    max-height: max-content;
    min-height: calc(1ch+var(--mm));
    background: #2b2b2b;
    outline: 2px solid white;
    color: white;
    font-family: sans-serif;
    margin: calc(var(--mm)/2);
    top: calc(-25 + var(--mm)/2);
    left: 25px;
    border-radius: 15px;
    transform-origin: left top;
}

.que:hover::after {
    opacity: 1;
    z-index: 60;
    transform: scale(1);
}

#QUExz::after {
    content: 'Размер поля по координатам x и z, в рамках которого будет происходить проверка условий';
}

#QUEair::after {
    content: 'Выберите это, если вы хотите создать множество условий, которые потенциально могут пересекаться. Дополнительные блоки воздух в условии позволят избежать ошибок.';
}

#QUEplayer::after {
    content: 'Выберите, где на поле будет располагаться сущность, относительно которой будет выполняться проверка условий';
}

#EntityInput {
    min-width: 25px;
    width: 25vw;
    max-width: 200px;
    resize: horizontal;
}

#QUEentity::after {
    content: 'Значение по умолчанию - @a (любой игрок). Пишите сюда что-то только, если знаете, что делаете'
}

#QUErun::after {
    content: 'Команда, что будет запущена, при выполнении всех условий';
}
